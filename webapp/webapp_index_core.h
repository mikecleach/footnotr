//
//  webapp_index_core.h
//  iOSHierarchyViewer
//
//
// THIS FILE IS GENERATED AUTOMATICALLY BY XCODE's script
//
//

#ifndef iOSHierarchyViewer_webapp_index_core 
#define iOSHierarchyViewer_webapp_index_core 

#define WEBAPP_INDEX_CORE @"PCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgiLz4KICAgIDx0aXRsZT5pT1MgSGllcmFyY2h5IFZpZXdlcjwvdGl0bGU+CiAgICA8bGluayBocmVmPSJzdHlsZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPgogICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJqcXVlcnkuanMiPjwvc2NyaXB0PgogICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJuYXZiYXIuanMiPjwvc2NyaXB0PgogIDwvaGVhZD4KPGJvZHk+CjwvYm9keT4KICA8c2NyaXB0PgogICAgZnVuY3Rpb24gUXVlcnlJbnB1dChvcHRpb25zKSB7CgogICAgICB2YXIgbyA9IG9wdGlvbnM7CgogICAgICB2YXIgZG9tID0gJCgnPGlucHV0IGNsYXNzPSJjb250ZXh0X3F1ZXJ5IiBwbGFjZWhvbGRlcj0iIj48L2lucHV0PicpOwoKICAgICAgdmFyIGVudGl0eVNjaGVtZSwgY29udGV4dE5hbWU7CgogICAgICBkb20ua2V5cHJlc3MoZnVuY3Rpb24oZSkgewogICAgICAgIGlmICggZS53aGljaCA9PSAxMyApIHsKICAgICAgICAgIHZhciBxdWVyeSA9IGRvbS52YWwoKTsKICAgICAgICAgIGlmICggbyAmJiBvLm9uUXVlcnlFbnRlcmVkICkgby5vblF1ZXJ5RW50ZXJlZChxdWVyeSwgZW50aXR5U2NoZW1lLCBjb250ZXh0TmFtZSk7CiAgICAgICAgICBkb20udmFsKCcnKTsKICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgdmFyIHNob3dGdW5jID0gZnVuY3Rpb24oKSB7CiAgICAgICAgZG9tLnNob3coKTsKICAgICAgfQoKICAgICAgdmFyIGhpZGVGdW5jID0gZnVuY3Rpb24oKSB7CiAgICAgICAgZG9tLmhpZGUoKTsKICAgICAgfQoKICAgICAgdmFyIGVudGl0eVNjaGVtZUZ1bmMgPSBmdW5jdGlvbihjdHhOYW1lLCBlbnRTY2hlbWUpIHsKICAgICAgICBjb250ZXh0TmFtZSA9IGN0eE5hbWU7CiAgICAgICAgZW50aXR5U2NoZW1lID0gZW50U2NoZW1lOwogICAgICAgIGRvbS5hdHRyKCdwbGFjZWhvbGRlcicsICdlbnRlciBwcmVkaWNhdGUgZm9yICInICsgZW50aXR5U2NoZW1lLm5hbWUgKyAnIiBlbnRpdHknKTsKICAgICAgfQoKICAgICAgZG9tLmhpZGUoKTsKCiAgICAgIG8ucGFyZW50RG9tLmFwcGVuZChkb20pOwoKICAgICAgcmV0dXJuIHsKICAgICAgICBzaG93OiBzaG93RnVuYywKICAgICAgICBoaWRlOiBoaWRlRnVuYywKICAgICAgICBlbnRpdHlTY2hlbWU6IGVudGl0eVNjaGVtZUZ1bmMKICAgICAgfQogICAgfQoKICAJZnVuY3Rpb24gQ29udGV4dHNMaXN0KG9wdGlvbnMpIHsKICAJCXZhciBvID0gb3B0aW9uczsKCiAgCQl2YXIgZG9tID0gJCgnPGRpdiBjbGFzcz0iY29udGV4dF9saXN0Ij48L2Rpdj4nKTsKCiAgCQl2YXIgc2hvd0Z1bmMgPSBmdW5jdGlvbigpIHsKICAJCQlkb20uc2hvdygpOwogIAkJfQoKICAJCXZhciBoaWRlRnVuYyA9IGZ1bmN0aW9uKCkgewogIAkJCWRvbS5oaWRlKCk7CiAgCQl9CgogIAkJby5wYXJlbnREb20uYXBwZW5kKGRvbSk7CgogICAgICB2YXIgY29udGV4dFNjaGVtZXM7CgogICAgICB2YXIgaGFuZGxlQ2xpY2tGdW5jID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAkKCcuY29udGV4dF9saXN0X2l0ZW0nKS5hdHRyKCdkYXRhLXNlbGVjdGVkJywgJzAnKTsKICAgICAgICAkKHRoaXMpLmF0dHIoJ2RhdGEtc2VsZWN0ZWQnLCAnMScpOwogICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KCQodGhpcykuYXR0cignZGF0YS1pbmRleCcpKTsKICAgICAgICBpZiAoIG8ub25Db250ZXh0U2VsZWN0ZWQgKSBvLm9uQ29udGV4dFNlbGVjdGVkKGNvbnRleHRTY2hlbWVzW2luZGV4XSk7CiAgICAgIH0KCiAgCQl2YXIgcHJlc2VudFNjaGVtZUZ1bmMgPSBmdW5jdGlvbihzY2hlbWVzLCBzZWxlY3RGaXJzdCkgewogIAkJCWRvbS5lbXB0eSgpOwogICAgICAgIGNvbnRleHRTY2hlbWVzID0gc2NoZW1lczsKICAJCQkkLmVhY2goc2NoZW1lcywgZnVuY3Rpb24oaW5kZXgsIHNjaGVtZSkgewogIAkJCQl2YXIgaXRlbURvbSA9ICQoJzxkaXYgY2xhc3M9ImNvbnRleHRfbGlzdF9pdGVtIj48L2Rpdj4nKTsKICAgICAgICAgIGl0ZW1Eb20uYXR0cignZGF0YS1pbmRleCcsIGluZGV4KTsKICAJCQkJaXRlbURvbS50ZXh0KHNjaGVtZS5uYW1lKTsKICAgICAgICAgIGl0ZW1Eb20uY2xpY2soaGFuZGxlQ2xpY2tGdW5jKTsKICAJCQkJZG9tLmFwcGVuZChpdGVtRG9tKTsKICAgICAgICAgIGlmICggaW5kZXggPT0gMCAmJiBzZWxlY3RGaXJzdCApIHsKICAgICAgICAgICAgaXRlbURvbS5jbGljaygpOwogICAgICAgICAgfQogIAkJCX0pOwogIAkJfQoKICAJCXJldHVybiB7CiAgCQkJc2hvdzogc2hvd0Z1bmMsCiAgCQkJaGlkZTogaGlkZUZ1bmMsCiAgCQkJcHJlc2VudFNjaGVtZTogcHJlc2VudFNjaGVtZUZ1bmMKICAJCX0KICAJfTsKICAJZnVuY3Rpb24gRW50aXRpZXNMaXN0KG9wdGlvbnMpIHsKICAJCXZhciBvID0gb3B0aW9uczsKCiAgCQl2YXIgZG9tID0gJCgnPGRpdiBjbGFzcz0iZW50aXRpZXNfbGlzdCI+PC9kaXY+Jyk7CgogIAkJdmFyIHNob3dGdW5jID0gZnVuY3Rpb24oKSB7CiAgCQkJZG9tLnNob3coKTsKICAJCX0KCiAgCQl2YXIgaGlkZUZ1bmMgPSBmdW5jdGlvbigpIHsKICAJCQlkb20uaGlkZSgpOwogIAkJfQoKICAJCW8ucGFyZW50RG9tLmFwcGVuZChkb20pOwoKICAJCXZhciBjb250ZXh0U2VjaG1lOwoKICAJCXZhciBoYW5kbGVDbGlja0Z1bmMgPSBmdW5jdGlvbihldikgewogIAkJCXZhciBpbmRleCA9IHBhcnNlSW50KCQodGhpcykuYXR0cignZGF0YS1pbmRleCcpKTsKICAgICAgICAkKCcuZW50aXRpZXNfbGlzdF9pdGVtJykuYXR0cignZGF0YS1zZWxlY3RlZCcsICcwJyk7CiAgICAgICAgJCh0aGlzKS5hdHRyKCdkYXRhLXNlbGVjdGVkJywgJzEnKTsKICAJCQlpZiAoIG8ub25FbnRpdFNlbGVjdGVkICkgewogIAkJCQlvLm9uRW50aXRTZWxlY3RlZChjb250ZXh0U2VjaG1lLm5hbWUsIGNvbnRleHRTZWNobWUuZW50aXRpZXNbaW5kZXhdKTsKICAJCQl9CiAgCQl9CgogIAkJdmFyIHByZXNlbnRFbnRpdGllc0Z1bmMgPSBmdW5jdGlvbihjb250ZXh0LCBzZWxlY3RGaXJzdCkgewogIAkJCWRvbS5lbXB0eSgpOwogIAkJCWNvbnRleHRTZWNobWUgPSBjb250ZXh0OwogIAkJCSQuZWFjaChjb250ZXh0LmVudGl0aWVzLCBmdW5jdGlvbihpbmRleCwgZW50aXR5KSB7CiAgCQkJCXZhciBpdGVtRG9tID0gJCgnPGRpdiBjbGFzcz0iZW50aXRpZXNfbGlzdF9pdGVtIj48L2Rpdj4nKTsKICAJCQkJaXRlbURvbS5hdHRyKCdkYXRhLWluZGV4JywgaW5kZXgpOwogIAkJCQlpdGVtRG9tLnRleHQoZW50aXR5Lm5hbWUpOwogIAkJCQlpdGVtRG9tLmNsaWNrKGhhbmRsZUNsaWNrRnVuYyk7CiAgCQkJCWRvbS5hcHBlbmQoaXRlbURvbSk7CiAgICAgICAgICBpZiAoIGluZGV4ID09IDAgJiYgc2VsZWN0Rmlyc3QgKXsKICAgICAgICAgICAgaXRlbURvbS5jbGljaygpOwogICAgICAgICAgfQogIAkJCX0pOwogIAkJfQoKICAJCXJldHVybiB7CiAgCQkJc2hvdzogc2hvd0Z1bmMsCiAgCQkJaGlkZTogaGlkZUZ1bmMsCiAgCQkJcHJlc2VudEVudGl0aWVzOiBwcmVzZW50RW50aXRpZXNGdW5jCiAgCQl9CiAgCX0KICAJZnVuY3Rpb24gRGF0YVRhYmxlKG9wdGlvbnMpIHsKICAJCXZhciBvID0gb3B0aW9uczsKCiAgCQl2YXIgZG9tID0gJCgnPGRpdiBjbGFzcz0iZGF0YXRhYmxlX3dyYXAiPjwvZGl2PicpOwogICAgICB2YXIgZW1wdHkgPSAkKCc8ZGl2IGNsYXNzPSJkYXRhdGFibGVfZW1wdHkiPi4uLm5vIGRhdGEuLi48L2Rpdj4nKTsKICAJCXZhciB0YWJsZSA9ICQoJzx0YWJsZSB3aWR0aD0iMTAwJSIgY2xhc3M9ImRhdGF0YWJsZSI+PC90YWJsZT4nKTsKICAJCWRvbS5hcHBlbmQodGFibGUpOwogICAgICBkb20uYXBwZW5kKGVtcHR5KTsKCiAgICAgIGVtcHR5LmhpZGUoKTsKCiAgCQl2YXIgc2hvd0Z1bmMgPSBmdW5jdGlvbigpIHsKICAJCQlkb20uc2hvdygpOwogIAkJfQoKICAJCXZhciBoaWRlRnVuYyA9IGZ1bmN0aW9uKCkgewogIAkJCWRvbS5oaWRlKCk7CiAgCQl9CgogICAgICB2YXIgY2xlYXJEYXRhRnVuYyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHRhYmxlLmVtcHR5KCk7CiAgICAgIH0KCiAgCQlvLnBhcmVudERvbS5hcHBlbmQoZG9tKTsKCiAgCQl2YXIgcHJlc2VudERhdGFGdW5jID0gZnVuY3Rpb24oY29udGV4dE5hbWUsIGVudGl0eVNjaGVtZSwgcHJlZGljYXRlKSB7CiAgCQkJdGFibGUuZW1wdHkoKTsKICAJCQl2YXIgdHJIZWFkZXIgPSAkKCc8dHI+PC90cj4nKTsKICAJCQkkLmVhY2goZW50aXR5U2NoZW1lLnByb3BlcnRpZXMsIGZ1bmN0aW9uKGluZGV4LCBhdHRyaWJ1dGUpIHsKICAJCQkJdmFyIHRkID0gJCgnPHRoPjwvdGg+Jyk7CiAgCQkJCXRkLmF0dHIoJ3dpZHRoJywgKDEwMC9lbnRpdHlTY2hlbWUucHJvcGVydGllcy5sZW5ndGgpICsgJyUnKTsKICAJCQkJdGQudGV4dChhdHRyaWJ1dGUubmFtZSk7CiAgCQkJCXRySGVhZGVyLmFwcGVuZCh0ZCk7CiAgCQkJfSk7CiAgCQkJdGFibGUuYXBwZW5kKHRySGVhZGVyKTsKICAgICAgICB2YXIgdXJsID0gJy9jb3JlP2VudGl0eT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGVudGl0eVNjaGVtZS5uYW1lKSArICcmY29udGV4dD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRleHROYW1lKTsKICAgICAgICBpZiAoIHByZWRpY2F0ZSApIHsKICAgICAgICAgIHVybCArPSAnJnByZWRpY2F0ZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHByZWRpY2F0ZSk7CiAgICAgICAgfQogIAkJCSQuZ2V0SlNPTih1cmwsIGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgIGlmICAoIGRhdGEuZXJyb3IgKSB7CiAgICAgICAgICAgIGVtcHR5LnRleHQoZGF0YS5lcnJvcik7CiAgICAgICAgICAgIGVtcHR5LnNob3coKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgaWYgKCBkYXRhLmxlbmd0aCA8PSAwICkgewogICAgICAgICAgICBlbXB0eS50ZXh0KCcuLi5ubyBkYXRhLi4uJyk7CiAgICAgICAgICAgIGVtcHR5LnNob3coKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGVtcHR5LmhpZGUoKTsKICAgICAgICAgIH0KICAJCQkJJC5lYWNoKGRhdGEsIGZ1bmN0aW9uKGluZGV4LCByb3cpIHsKCSAgCQkJCXZhciB0ciA9ICQoJzx0cj48L3RyPicpOwkKCSAgCQkJCSQuZWFjaChlbnRpdHlTY2hlbWUucHJvcGVydGllcywgZnVuY3Rpb24oaW5kZXgsIGF0dHJpYnV0ZSkgewoJCSAgCQkJCXZhciB0ZCA9ICQoJzx0ZD48L3RkPicpOwoJCSAgCQkJCXRkLmF0dHIoJ3dpZHRoJywgKDEwMC9lbnRpdHlTY2hlbWUucHJvcGVydGllcy5sZW5ndGgpICsgJyUnKTsKCQkgIAkJCQl0ZC50ZXh0KHJvd1thdHRyaWJ1dGUubmFtZV0pOwoJCSAgCQkJCXRyLmFwcGVuZCh0ZCk7CgkJICAJCQl9KTsKICAJCQkJCXRhYmxlLmFwcGVuZCh0cik7CiAgCQkJCX0pOwogIAkJCX0pOwogIAkJfQoKICAJCXJldHVybiB7CiAgCQkJc2hvdzogc2hvd0Z1bmMsCiAgCQkJaGlkZTogaGlkZUZ1bmMsCiAgICAgICAgY2xlYXJEYXRhOiBjbGVhckRhdGFGdW5jLAogIAkJCXByZXNlbnREYXRhOiBwcmVzZW50RGF0YUZ1bmMKICAJCX0KICAJfQogICA8L3NjcmlwdD4KICA8c2NyaXB0PgoKICAJdmFyIG5hdmJhciA9IG5ldyBOYXZiYXIoeyBwYXJlbnREb206ICQoJ2JvZHknKSB9KTsKICAgIG5hdmJhci5zaG93TG9hZGluZygpOwoKICAgIHZhciBkYXRhVGFibGUgPSBuZXcgRGF0YVRhYmxlKHsgcGFyZW50RG9tOiAkKCdib2R5JykgfSk7CiAgICBkYXRhVGFibGUuc2hvdygpOwogICAgCiAgICB2YXIgY29udGV4dExpc3QgPSBuZXcgQ29udGV4dHNMaXN0KHsgCiAgICAgIHBhcmVudERvbTogJCgnYm9keScpLAogICAgICBvbkNvbnRleHRTZWxlY3RlZDogZnVuY3Rpb24oY29udGV4dFNjaGVtZSkgewogICAgICAgIGRhdGFUYWJsZS5jbGVhckRhdGEoKTsKICAgICAgICBlbnRpdGllc0xpc3QucHJlc2VudEVudGl0aWVzKGNvbnRleHRTY2hlbWUsIHRydWUpOwogICAgICB9CiAgICB9KTsKICAgIGNvbnRleHRMaXN0LnNob3coKTsKCiAgICB2YXIgcXVlcnlJbnB1dCA9IFF1ZXJ5SW5wdXQoeyAKICAgICAgcGFyZW50RG9tOiAkKCdib2R5JyksCiAgICAgIG9uUXVlcnlFbnRlcmVkOiBmdW5jdGlvbihxdWVyeSwgZW50aXR5U2NoZW1lLCBjb250ZXh0TmFtZSkgewogICAgICAgIGRhdGFUYWJsZS5wcmVzZW50RGF0YShjb250ZXh0TmFtZSwgZW50aXR5U2NoZW1lLCBxdWVyeSk7CiAgICAgIH0KICAgIH0pOwoKICAgIHZhciBlbnRpdGllc0xpc3QgPSBuZXcgRW50aXRpZXNMaXN0KHsgCiAgICAJcGFyZW50RG9tOiAkKCdib2R5JyksCiAgICAJb25FbnRpdFNlbGVjdGVkOiBmdW5jdGlvbihjb250ZXh0TmFtZSwgZW50aXR5U2NoZW1lKSB7CiAgICAgICAgcXVlcnlJbnB1dC5lbnRpdHlTY2hlbWUoY29udGV4dE5hbWUsIGVudGl0eVNjaGVtZSk7CiAgICAJCWRhdGFUYWJsZS5wcmVzZW50RGF0YShjb250ZXh0TmFtZSwgZW50aXR5U2NoZW1lKTsKICAgICAgICBxdWVyeUlucHV0LnNob3coKTsKICAgIAl9CiAgICB9KTsKICAgIGVudGl0aWVzTGlzdC5zaG93KCk7CiAgICAKICAgICQuZ2V0SlNPTignL2NvcmUnLCBmdW5jdGlvbihzY2hlbWUpIHsgICAgICAKICAgICAgIG5hdmJhci5oaWRlTG9hZGluZygpOyAgICAgCiAgICAgICBjb250ZXh0TGlzdC5wcmVzZW50U2NoZW1lKHNjaGVtZSwgdHJ1ZSk7IAogICAgfSk7CiAgPC9zY3JpcHQ+CjwvaHRtbD4="

#endif
