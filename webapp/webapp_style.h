//
//  webapp_style.h
//  iOSHierarchyViewer
//
//
// THIS FILE IS GENERATED AUTOMATICALLY BY XCODE's script
//
//

#ifndef iOSHierarchyViewer_webapp_style 
#define iOSHierarchyViewer_webapp_style 

#define WEBAPP_STYLE @""

#endif
